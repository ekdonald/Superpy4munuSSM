.build:default:
  stage: build
  before_script:
    - apt-get update && apt-get install -y curl git
    - curl -L https://github.com/Kitware/CMake/releases/download/v3.23.2/cmake-3.23.2-linux-x86_64.tar.gz | tar xz -C /usr --strip-components=1
  script:
    - mkdir build && cd build
    - cmake -DHiggsTools_BUILD_PYTHON_MODULE=OFF ..
    - cmake --build .
  artifacts:
    paths:
      - build
    expire_in: 1h

.test:default:
  stage: test
  before_script:
    - apt-get update && apt-get install -y curl git
    - curl -L https://github.com/Kitware/CMake/releases/download/v3.23.2/cmake-3.23.2-linux-x86_64.tar.gz | tar xz -C /usr --strip-components=1
  script:
    - cd build
    - ctest --output-on-failure


build:gcc:12:
  extends: .build:default
  image: gcc:12

test:gcc:12:
  extends: .test:default
  image: gcc:12
  needs:
    - build:gcc:12

build:gcc:11:
  extends: .build:default
  image: gcc:11

test:gcc:11:
  extends: .test:default
  image: gcc:11
  needs:
    - build:gcc:11

build:gcc:9:
  extends: .build:default
  image: gcc:9

test:gcc:9:
  extends: .test:default
  image: gcc:9
  needs:
    - build:gcc:9

build:gcc:10:
  extends: .build:default
  image: gcc:10

test:gcc:10:
  extends: .test:default
  image: gcc:10
  needs:
    - build:gcc:10

build:clang:11:
  extends: .build:default
  variables:
    CXX: clang++-11
    C: clang-11
  image: teeks99/clang-ubuntu:11

test:clang:11:
  extends: .test:default
  image: teeks99/clang-ubuntu:11
  needs:
    - build:clang:11

build:clang:12:
  extends: .build:default
  variables:
    CXX: clang++-12
    C: clang-12
  image: teeks99/clang-ubuntu:12

test:clang:12:
  extends: .test:default
  image: teeks99/clang-ubuntu:12
  needs:
    - build:clang:12

build:clang:13:
  extends: .build:default
  variables:
    CXX: clang++-13
    C: clang-13
  image: teeks99/clang-ubuntu:13

test:clang:13:
  extends: .test:default
  image: teeks99/clang-ubuntu:13
  needs:
    - build:clang:13

build:clang:14:
  extends: .build:default
  variables:
    CXX: clang++-14
    C: clang-14
  image: teeks99/clang-ubuntu:14

test:clang:14:
  extends: .test:default
  image: teeks99/clang-ubuntu:14
  needs:
    - build:clang:14

build:coverage:
  extends: .build:default
  image: gcc:12
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_CXX_FLAGS='-O0 --coverage -fPIC' -DCMAKE_EXE_LINKER_FLAGS='--coverage' -DCMAKE_BUILD_TYPE=Debug -DHiggsTools_BUILD_PYTHON_MODULE=OFF ..
    - cmake --build .

test:coverage:
  extends: .test:default
  image: gcc:12
  needs:
    - build:coverage
  script:
    - apt-get update && apt-get install -y gcovr
    - cd build
    - ctest --output-on-failure
    - gcovr --xml-pretty -e _deps -e wstp -e CMakeFiles -e ../tests -e ../examples -e ../python -e ../wstp -e ../doc -e ../src/utilities/RootFinding.hpp --exclude-unreachable-branches --exclude-throw-branches --print-summary -o coverage.xml -r .. .
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml

pages:
  stage: deploy
  image: rikorose/gcc-cmake:gcc-10
  dependencies: []
  script:
    - apt-get update && apt-get install -y doxygen python3-pip
    - pip3 install sphinx sphinx-rtd-theme breathe json-schema-for-humans
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --target sphinx-doc
    - mv doc/sphinx/ ../public/
  artifacts:
    paths:
      - public
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
