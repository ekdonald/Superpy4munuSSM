from contextlib import contextmanager
import numpy as np


def grid2CppString(grid):
    """
    Format a n-dimensional grid as a std::array<std::vector<double>,n>.
    """
    from sys import maxsize

    with np.printoptions(floatmode="maxprec", threshold=maxsize):
        edges = [np.array2string(edge, separator=", ") for edge in grid]

    edges = [
        "std::vector<double>" + edge.replace("[", "{").replace("]", "}")
        for edge in edges
    ]
    return "std::array{" + ",\n".join(edges) + "};\n\n"


def values2CppString(values):
    """
    Format an array of (potentially multidimensional) values as a c++ vector.
    """
    from sys import maxsize

    datatype = "double"
    if len(values.shape) > 1:
        datatype = "utilities::ArithmeticArray<double,{}>".format(values.shape[1])
    with np.printoptions(floatmode="maxprec", threshold=maxsize):
        valuestring = (
            "std::vector<{datatype}>".format(datatype=datatype)
            + np.array2string(values, separator=", ")
            .replace("[", "{")
            .replace("]", "}")
            + ";\n\n"
        )
    return valuestring


@contextmanager
def cppDataFile(filepath: str, scriptname: str):
    """
    Open a generated c++ file for HiggsPredictions.
    For use with grid2CppString() and values2CppString().
    """
    import os.path
    from subprocess import run

    filename = os.path.basename(filepath)
    cppf = open(
        filepath,
        mode="w",
    )

    try:
        cppf.write(
            "/**\n"
            "* @file {filename}\n"
            "*\n"
            "* @copyright Copyright 2019 by the authors.\n"
            "* HiggsBounds is released under the GPLv3+.\n"
            "*\n"
            "* This file is part of HiggsBounds.\n"
            "* This file was generated automatically using {scriptname}, do not edit this file manually.\n"
            "*/\n"
            "".format(filename=filename, scriptname=scriptname)
        )
        cppf.write(
            '#include "utilities/ArithmeticArray.hpp"\n#include <array>\n#include <vector>\n'
        )
        cppf.write('\n#pragma GCC diagnostic ignored "-Wmissing-braces"\n')
        cppf.write("\nnamespace Higgs {namespace {\n")
        yield cppf
    finally:
        cppf.write("\n} }\n")
        cppf.close()
        res = run(
            ["clang-format", filepath, "-i"],
            capture_output=True,
            universal_newlines=True,
        )
        print(res.stdout)
